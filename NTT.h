#include <stdio.h>
#include <stdint.h>
#include "SABER_params.h"
/*
	We perform a size-256 negacyclic NTT.
	The modulo is changed to a sufficiently large prime number Q.
	Q > 2 * SABER_L * SABER_N * 2^SABER_EQ  * [log (SABER_MU / 2)]
*/
#define MUL64(X, Y) ((int64_t)X * (int64_t)Y)
#define Q 25166081 // 196610 * 128 + 1
#define inv_2 12583041 // inverse of 2 mod Q
#define Zeta 1708789

#define NTT_layers 7 // Layer of Incomplete NTT

/*
	We need to find primitive root of -1 in Z_Q mod (X^256 + 1).
	Z_Q mod (X^256 + 1) has a prinitive root Zeta of -1 with order 128.
	We need all powers from 1 to 128 of Zeta and their inverse
	
	For example, root_table[i] = Zeta^i mod Q;
	inv_root_table[i] = Zeta^-i mod Q
*/

#ifdef Mont_reduce
#include "reduce.h"
	#define MODQ_MUL(X, Y) montgomery_reduce(((int64_t)(X) * (int64_t)(Y))) // multiplication mod Q
	#define	inv_128 8388351 // inverse of 128 mod Q
	#define inv_64 16776702 // inverse of 64 mod Q
	#define inv_32 8387323 // inverse of 32 mod Q
	static int32_t root_table[128] = 
	{
		16733526, 11602680, 13858533, 1359456, 18019917, 716072, 15932507, 22292279,
		11637995, 11479830, 24577585, 21105416, 22500797, 23527899, 16472356, 22460004, 
		1776511, 23934554, 18234579, 17149815, 17221155, 17732051, 19847105, 24466058, 
		2559945, 12491104, 24346825, 3112884, 8060830, 5856816, 15663744, 18846441, 
		10203707, 15385107, 4092287, 6415135, 18898725, 12940233, 1069349, 7833032, 
		16081102, 14036444, 7460755, 21434067, 11450840, 13631883, 10319196, 9310726, 
		19430452, 834331, 11980428, 20674136, 19496881, 14953502, 24551809, 16001902, 
		21131262, 21389136, 15565412, 24129330, 2733537, 11994445, 14660437, 18149343, 
		2921358, 15422221, 5563113, 1195379, 20355585, 218091, 12174351, 7208775, 
		7261676, 7345613, 16472287, 5217887, 908786, 159887, 10171507, 5432373, 
		18588637, 9812256, 22655248, 5840210, 1686897, 2953912, 1134236, 4271989, 
		2695651, 25140804, 17101524, 17671155, 23177096, 24214209, 10910265, 6021313, 
		1203107, 13684452, 21905048, 7332469, 4293923, 10978968, 5184115, 22676492, 
		17864924, 23385120, 22443020, 21361609, 13135998, 14599282, 6726360, 1965477, 
		20971417, 7488524, 9567042, 18918052, 20806964, 21637634, 18929621, 9247239, 
		24518400, 3741909, 10575964, 1022443, 9344183, 13047993, 25123393, 11683987
	};

	static int32_t inv_root_table[128] = 
	{
		-8432555, -11683987, 42688, 12118088, -9344183, -1022443, -10575964, -3741909,
	 	647681, -9247239, 6236460, 3528447, 4359117, 6248029, -9567042, -7488524, 
	 	4194664, -1965477, -6726360, 10566799, 12030083, 3804472, 2723061, 1780961, 
	 	7301157, 2489589, -5184115, -10978968, -4293923, -7332469, 3261033, 11481629, 
	 	-1203107, -6021313, -10910265, 951872, 1988985, 7494926, 8064557, 25277, 
	 	-2695651, -4271989, -1134236, -2953912, -1686897, -5840210, 2510833, -9812256, 
	 	6577444, -5432373, -10171507, -159887, -908786, -5217887, 8693794, -7345613, 
	 	-7261676, -7208775, -12174351, -218091, 4810496, -1195379, -5563113, 9743860, 
	 	-2921358, 7016738, 10505644, -11994445, -2733537, 1036751, 9600669, 3776945, 
	 	4034819, 9164179, 614272, 10212579, 5669200, 4491945, -11980428, -834331, 
	 	5735629, -9310726, -10319196, 11534198, -11450840, 3732014, -7460755, 11129637, 
	 	9084979, -7833032, -1069349, 12225848, 6267356, -6415135, -4092287, 9780974, 
	 	-10203707, 6319640, 9502337, -5856816, -8060830, -3112884, 819256, -12491104, 
	 	-2559945, 700023, 5318976, 7434030, 7944926, 8016266, 6931502, 1231527, 
	 	-1776511, 2706077, 8693725, 1638182, 2665284, 4060665, 588496, -11479830, 
	 	-11637995, 2873802, 9233574, -716072, 7146164, -1359456, 11307548, -11602680
	 };
#else
	#define MODQ_MUL(X, Y) (((int64_t)(X) * (int64_t)(Y)) % (Q)) // multiplication mod Q
	#define inv_128 -196610 // inverse of 128 mod Q
	#define inv_64 24772861 // inverse of 64 mod Q
	#define inv_32 24379641 // inverse of 32 mod Q
	static int32_t root_table[128] = 
	{	
		1, 1708789, -10199747, 6909625, -3530402, 169818, -6949609, 5220941,
		10171625, 5740827, -2175702, -5332667, 8725108, 712653, 12113708, -10127075,
		-6585902, 2205388, -2376375, -127958, -10311134, 1099885, -7038058, 12025166,
		-11243741, -10569794, -2382252, -1414592, -12002957, 11288494, 4283752, -4518061,
		12224970, 8578769, -11580002, 7459750, -9771451, -5564473, -9868967, 9955785,
		-10359878, 7616979, -11666526, 6926189, -10990531, -8537737, -11257497, -11551624,
		4435905, 2071845, 6836706, -9448462, -2836563, 212717, -10404251, 8924735,
		-5093599, 4500887, 9849271, 5952449, 3752167, -1424931, 12582515, -4572744,
		12174836, 5490767, -7063743, 11424965, -9645256, 12081374, 2603275, -9457909,
		10857756, -3701523, -4817512, -9590977, 1264939, -848219, -12027677, -1291668,
		3064053, -8256314, 7793502, -11752745, -914428, -2538402, 7139901, -7277154,
		-6430624, -11614334, 3450613, 7091519, -11330467, -3953599, -6871080, 9168430,
		-4900551, 5810011, -11566064, -7717875, -10653568, -9803210, 8242393, 11267455,
		-9764351, -3213615, -91549, -5564665, -10797402, 5352891, -3205585, 5969976,
		6060580, 7448824, -6767963, 1464581, -6188717, 3525864, -3501352, -12187545,
		-4162265, 5165135, 3773600, 6401851, -6015370, 12199277, -5691744, -3881784
	};

	static int32_t inv_root_table[128] = 
	{
		1, 3881784, 5691744, -12199277, 6015370, -6401851, -3773600, -5165135,
		4162265, 12187545, 3501352, -3525864, 6188717, -1464581, 6767963, -7448824,
		-6060580, -5969976, 3205585, -5352891, 10797402, 5564665, 91549, 3213615,
		9764351, -11267455, -8242393, 9803210, 10653568, 7717875, 11566064, -5810011,
		4900551, -9168430, 6871080, 3953599, 11330467, -7091519, -3450613, 11614334,
		6430624, 7277154, -7139901, 2538402, 914428, 11752745, -7793502, 8256314,
		-3064053, 1291668, 12027677, 848219, -1264939, 9590977, 4817512, 3701523,
		-10857756, 9457909, -2603275, -12081374, 9645256, -11424965, 7063743, -5490767,
		-12174836, 4572744, -12582515, 1424931, -3752167, -5952449, -9849271, -4500887,
		5093599, -8924735, 10404251, -212717, 2836563, 9448462, -6836706, -2071845,
		-4435905, 11551624, 11257497, 8537737, 10990531, -6926189, 11666526, -7616979,
		10359878, -9955785, 9868967, 5564473, 9771451, -7459750, 11580002, -8578769,
		-12224970, 4518061, -4283752, -11288494, 12002957, 1414592, 2382252, 10569794,
		11243741, -12025166, 7038058, -1099885, 10311134, 127958, 2376375, -2205388,
		6585902, 10127075, -12113708, -712653, -8725108, 5332667, 2175702, -5740827,
		-10171625, -5220941, 6949609, -169818, 3530402, -6909625, 10199747, -1708789
	};
#endif


/* 
	Array: bit reverse array

	Z_Q mod (X^256 + 1) has root of -1 with order 128.
	FFT takes the bit reverse order of the power of a primitive root sequentially.

	For example: bit_reverse[1] = bit_reverse[0b0000001] = 0b1000000 = 64
*/
static int8_t bit_reverse[128] = 
{
	0, 64, 32, 96, 16, 80, 48, 112, 8, 72, 40, 104, 24, 88, 56, 120,
	4, 68, 36, 100, 20, 84, 52, 116, 12, 76, 44, 108, 28, 92, 60, 124,
	2, 66, 34, 98, 18, 82, 50, 114, 10, 74, 42, 106, 26, 90, 58, 122,
	6, 70, 38, 102, 22, 86, 54, 118, 14, 78, 46, 110, 30, 94, 62, 126,
	1, 65, 33, 97, 17, 81, 49, 113, 9, 73, 41, 105, 25, 89, 57, 121,
	5, 69, 37, 101, 21, 85, 53, 117, 13, 77, 45, 109, 29, 93, 61, 125,
	3, 67, 35, 99, 19, 83, 51, 115, 11, 75, 43, 107, 27, 91, 59, 123,
	7, 71, 39, 103, 23, 87, 55, 119, 15, 79, 47, 111, 31, 95, 63, 127
};

void CT_Butterfly(int32_t* out, const int32_t* in, const int8_t c_index, const int len);
void GS_Butterfly(int32_t* out, const int32_t* in, const int8_t c_index, const int len);
void NTT_forward(int32_t *out, const int16_t *in);
void NTT_inv(int16_t *out, int32_t *in);
void poly_mul_acc_NTT(const uint16_t a[SABER_N], const uint16_t b[SABER_N], uint16_t res[SABER_N]);
void poly_mul_acc_NTT_no_inv(const uint16_t a[SABER_N], const uint16_t b[SABER_N], int32_t* result_t);
void poly_mul_acc_NTT_inv(int32_t result_t[SABER_N], uint16_t* res);

// Incomplete NTT
void NTT_forward_layer(int32_t *out, const int16_t *in, const int layer);
void NTT_inv_layer(int16_t *out, int32_t *in, const int layer);
void poly_mul_acc_NTT_layer(const uint16_t a[SABER_N], const uint16_t b[SABER_N], uint16_t res[SABER_N], const int layer);
void poly_mul_acc_NTT_layer_no_inv(const uint16_t a[SABER_N], const uint16_t b[SABER_N], int32_t* result_t, const int layer);
void poly_mul_acc_NTT_layer_inv(int32_t result_t[SABER_N], uint16_t* res, const int layer);